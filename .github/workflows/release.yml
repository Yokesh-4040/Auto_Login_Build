name: Create Release

on:
  push:
    tags:
      - 'v*'  # Triggers on tags like v1.0.1

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install NSIS
      run: |
        choco install nsis -y
        refreshenv
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        
    - name: Create Release Directory
      run: |
        $version = "${{ github.ref_name }}"
        New-Item -Path "releases\$version" -ItemType Directory -Force
        
    - name: Build Installer
      shell: cmd
      run: |
        cd installer
        "C:\Program Files (x86)\NSIS\makensis.exe" SimulanisAutoLogin.nsi
        cd ..
        copy "installer\SimulanisAutoLogin_Setup.exe" "releases\${{ github.ref_name }}\SimulanisAutoLogin_Setup.exe"
        
    - name: Create Build Package
      shell: pwsh
      run: |
        # Set variables
        $version = "${{ github.ref_name }}"
        $buildDir = "releases\$version\build"
        $sourceDir = "$version\SimulanisLogin"
        
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Source directory: $sourceDir"
        Write-Host "Build directory: $buildDir"
        
        # List all directories and files
        Write-Host "Available directories and files:"
        Get-ChildItem -Recurse | ForEach-Object { Write-Host $_.FullName }
        
        # Create build directory
        New-Item -Path $buildDir -ItemType Directory -Force
        
        # Copy files if source exists
        if (Test-Path $sourceDir) {
            Write-Host "Copying files from $sourceDir to $buildDir"
            
            # Copy main executable and config
            Copy-Item -Path "$sourceDir\SimulanisLogin.exe" -Destination $buildDir -Force
            Copy-Item -Path "$sourceDir\config.json" -Destination "$buildDir\headless_config.json" -Force
            
            # Copy directories
            $dirsToCopy = @("Icons", "Logos", "_internal")
            foreach ($dir in $dirsToCopy) {
                $sourcePath = Join-Path $sourceDir $dir
                if (Test-Path $sourcePath) {
                    Copy-Item -Path $sourcePath -Destination $buildDir -Recurse -Force
                    Write-Host "Copied $dir directory successfully"
                } else {
                    Write-Warning "Source directory not found: $sourcePath"
                }
            }
            
            # Create batch files
            @"
@echo off
start "" "%~dp0SimulanisLogin.exe"
"@ | Out-File -FilePath "$buildDir\Start Simulanis Login.bat" -Encoding ASCII -Force

            @"
@echo off
start "" "%~dp0SimulanisLogin.exe" --gui
"@ | Out-File -FilePath "$buildDir\Start Simulanis Login (GUI).bat" -Encoding ASCII -Force
            
            # Create zip archive
            $zipPath = "releases\$version\Simulanis_Auto_Login_$($version)_Build.zip"
            Write-Host "Creating zip archive at: $zipPath"
            Compress-Archive -Path "$buildDir\*" -DestinationPath $zipPath -Force
            
            # Verify zip creation
            if (Test-Path $zipPath) {
                Write-Host "Zip archive created successfully"
                Get-Item $zipPath | Select-Object FullName, Length
            } else {
                Write-Error "Failed to create zip archive"
                exit 1
            }
            
            # Cleanup build directory
            Remove-Item -Path $buildDir -Recurse -Force
        } else {
            Write-Error "Source directory not found: $sourceDir"
            Write-Host "Current directory contents:"
            Get-ChildItem -Recurse | ForEach-Object { Write-Host $_.FullName }
            exit 1
        }
        
    - name: Create Release Notes
      run: |
        $version = "${{ github.ref_name }}"
        if (-not (Test-Path "releases\$version\RELEASE_NOTES.md")) {
            @"
# Release $version

## What's New
- Updated application with latest features and improvements
- Bug fixes and performance enhancements

## Installation
1. Download the installer (SimulanisAutoLogin_Setup.exe)
2. Run the installer and follow the installation wizard
3. Launch the application from the Start Menu or Desktop shortcut
"@ | Out-File -FilePath "releases\$version\RELEASE_NOTES.md" -Encoding UTF8
        }
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          releases/${{ github.ref_name }}/SimulanisAutoLogin_Setup.exe
          releases/${{ github.ref_name }}/Simulanis_Auto_Login_${{ github.ref_name }}_Build.zip
        body_path: releases/${{ github.ref_name }}/RELEASE_NOTES.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 